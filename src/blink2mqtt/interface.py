from argparse import Namespace
from asyncio import AbstractEventLoop
from blinkpy.blinkpy import Blink
from datetime import datetime
from logging import Logger
from mqtt_helper import MqttHelper
from paho.mqtt.client import Client, MQTTMessage, ConnectFlags, DisconnectFlags
from paho.mqtt.reasoncodes import ReasonCode
from paho.mqtt.properties import Properties
from types import FrameType
from typing import Protocol, Any

# grep -ERh --exclude interface.py 'def\s+[^_]' src/ | sed -E "s/^[[:space:]]+//g" | awk '{ print "   ", $0, "..." }' | sort


class BlinkServiceProtocol(Protocol):
    api_calls: int
    args: Namespace | None
    blink_cameras: dict[str, dict[str, Any]]
    blink_config: dict[str, Any]
    blink_sync_modules: dict[str, dict[str, Any]]
    blink: Blink
    client_id: str
    config: dict[str, Any]
    device_interval: int
    device_list_interval: int
    devices: dict[str, Any]
    discovery_complete: bool
    events: list
    last_call_date: str
    logger: Logger
    loop: AbstractEventLoop
    mqtt_config: dict[str, Any]
    mqtt_connect_time: datetime
    mqtt_helper: MqttHelper
    mqttc: Client
    qos: int
    rate_limited: bool
    running: bool
    service_name: str
    service: str
    session: Any
    snapshot_update_interval: int
    states: dict[str, Any]

    async def blink_refresh(self) -> None: ...
    async def collect_all_blink_events(self) -> None: ...
    async def collect_events_loop(self) -> None: ...
    async def collect_snapshots_loop(self) -> None: ...
    async def connect(self) -> None: ...
    async def device_list_loop(self) -> None: ...
    async def device_loop(self) -> None: ...
    async def disconnect(self) -> None: ...
    async def get_cameras(self) -> dict[str, Any]: ...
    async def get_events_from_device(self, device_id: str) -> None: ...
    async def get_snapshot_from_device(self, device_id: str) -> str | None: ...
    async def get_sync_modules(self) -> dict[str, Any]: ...
    async def handle_device_command(self, device_id: str, handler: str, message: str) -> None: ...
    async def heartbeat(self) -> None: ...
    async def main_loop(self) -> None: ...
    async def process_events_loop(self) -> None: ...
    async def process_events(self) -> None: ...
    async def queue_device_event(self, device_id: str, code: str, payload: Any) -> None: ...
    async def refresh_all_devices(self) -> None: ...
    async def refresh_device_list(self) -> None: ...
    async def refresh_snapshot_all_devices(self) -> None: ...
    async def refresh_snapshot(self, device_id: str, type: str) -> None: ...
    async def set_arm_mode(self, device_id: str, switch: bool) -> Any | None: ...
    async def set_motion_detection(self, device_id: str, switch: bool) -> bool | None: ...
    async def take_snapshot_from_device(self, device_id: str) -> None: ...

    def _assert_no_tuples(self, data: Any, path: str = "root") -> None: ...
    def _decode_payload(self, raw: bytes) -> Any: ...
    def _handle_device_topic(self, components: list[str], payload: str) -> None: ...
    def _handle_homeassistant_message(self, payload: str) -> None: ...
    def _parse_device_topic(self, components: list[str]) -> list[str | None] | None: ...

    def build_camera_states(self, device_id: str, camera: dict[str, str]) -> None: ...
    def build_camera(self, camera: dict[str, str]) -> str: ...
    def build_component(self, device: dict[str, str]) -> str: ...
    def build_switch(self, sync_module: dict[str, str]) -> str: ...
    def build_sync_module_states(self, device_id: str, sync_module: dict[str, str]) -> None: ...
    def classify_device(self, device: dict[str, str]) -> str | None: ...
    def get_api_calls(self) -> int: ...
    def get_camera_motion(self, device_id: str) -> Any | None: ...
    def get_component_type(self, device_id: str) -> str: ...
    def get_component(self, device_id: str) -> dict[str, Any]: ...
    def get_device_availability_topic(self, device_id: str) -> str: ...
    def get_device_image_topic(self, device_id: str) -> str: ...
    def get_device_name(self, device_id: str) -> str: ...
    def get_device_state_topic(self, device_id: str, mode_name: str = "") -> str: ...
    def get_last_call_date(self) -> str: ...
    def get_mode(self, device_id: str, mode_name: str) -> dict[str, Any]: ...
    def get_modes(self, device_id: str) -> dict[str, Any]: ...
    def get_next_event(self) -> dict[str, Any] | None: ...
    def get_recorded_file(self, device_id: str, file: str) -> str | None: ...
    def handle_service_command(self, handler: str, message: str) -> None: ...
    def handle_signal(self, signum: int, frame: FrameType | None) -> Any: ...
    def heartbeat_ready(self) -> None: ...
    def increase_api_calls(self) -> None: ...
    def is_discovered(self, device_id: str) -> bool: ...
    def is_rate_limited(self) -> bool: ...
    def load_config(self, config_arg: Any | None = None) -> dict[str, Any]: ...
    def mark_ready(self) -> None: ...
    def mqtt_on_connect(
        self, client: Client, userdata: dict[str, Any], flags: ConnectFlags, reason_code: ReasonCode, properties: Properties | None
    ) -> None: ...
    def mqtt_on_disconnect(self, client: Client, userdata: Any, flags: DisconnectFlags, reason_code: ReasonCode, properties: Properties | None) -> None: ...
    def mqtt_on_log(self, client: Client, userdata: Any, paho_log_level: int, msg: str) -> None: ...
    def mqtt_on_message(self, client: Client, userdata: Any, msg: MQTTMessage) -> None: ...
    def mqtt_on_subscribe(self, client: Client, userdata: Any, mid: int, reason_code_list: list[ReasonCode], properties: Properties) -> None: ...
    def mqtt_safe_publish(self, topic: str, payload: str | bool | int | dict | None, **kwargs: Any) -> None: ...
    def mqttc_create(self) -> None: ...
    def publish_device_availability(self, device_id: str, online: bool = True) -> None: ...
    def publish_device_discovery(self, device_id: str) -> None: ...
    def publish_device_image(self, device_id: str, type: str) -> None: ...
    def publish_device_state(self, device_id: str) -> None: ...
    def publish_service_availability(self, status: str = "online") -> None: ...
    def publish_service_discovery(self) -> None: ...
    def publish_service_state(self) -> None: ...
    def read_file(self, file_name: str) -> str: ...
    def rediscover_all(self) -> None: ...
    def reset_api_call_count(self) -> None: ...
    def safe_split_device(self, topic: str, segment: str) -> list[str]: ...
    def set_discovered(self, device_id: str) -> None: ...
    def upsert_device(self, device_id: str, **kwargs: dict[str, Any] | str | int | bool | None) -> None: ...
    def upsert_state(self, device_id: str, **kwargs: dict[str, Any] | str | int | bool | None) -> None: ...
