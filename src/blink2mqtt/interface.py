import argparse
from datetime import datetime
import paho.mqtt.client as mqtt
from paho.mqtt.client import Client, MQTTMessageInfo, LogLevel
from typing import Protocol, Optional, Any
from blink2mqtt.core import Blink2Mqtt

# grep -ERh --exclude interface.py 'def\s+[^_]' src/ | sed -E "s/^[[:space:]]+//g" | awk '{ print "   ", $0, "..." }' | sort


class BlinkServiceProtocol(Protocol):
    """Common interface so mixins can type-hint against the full service."""

    async def blink_refresh(self: Blink2Mqtt) -> None: ...
    async def collect_snapshots_loop(self: Blink2Mqtt) -> None: ...
    async def collect_snapshots(self: Blink2Mqtt) -> None: ...
    async def connect(self: Blink2Mqtt) -> None: ...
    async def device_list_loop(self: Blink2Mqtt) -> None: ...
    async def device_loop(self: Blink2Mqtt) -> None: ...
    async def disconnect(self: Blink2Mqtt) -> None: ...
    async def get_cameras(self: Blink2Mqtt) -> list: ...
    async def get_snapshot_from_device(
        self: Blink2Mqtt, device_id: str
    ) -> str | None: ...
    async def get_sync_modules(self: Blink2Mqtt) -> list: ...
    async def heartbeat(self: Blink2Mqtt) -> None: ...
    async def main_loop(self: Blink2Mqtt) -> None: ...
    async def refresh_all_devices(self: "Blink2Mqtt") -> None: ...
    async def refresh_boosted_devices(self: "Blink2Mqtt") -> None: ...
    async def refresh_device_list(self: Blink2Mqtt) -> None: ...
    async def refresh_snapshot_all_devices(self: "Blink2Mqtt") -> None: ...
    async def refresh_snapshot(
        self: "Blink2Mqtt", device_id: str, type: str
    ) -> None: ...
    async def send_command(
        self: Blink2Mqtt, device_id: str, payload: str, attribute: str
    ) -> None: ...
    async def set_arm_mode(
        self: Blink2Mqtt, device_id: str, switch: bool
    ) -> Any | None: ...
    async def set_motion_detection(
        self: Blink2Mqtt, device_id: str, switch: bool
    ) -> Any | None: ...
    async def take_snapshot_from_device(self: Blink2Mqtt, device_id: str) -> None: ...
    def build_blink_capabilities(
        self: Blink2Mqtt, device_id: str, attributes: list
    ) -> None: ...
    def build_camera(self: Blink2Mqtt, device: list) -> str: ...
    def build_component(self: Blink2Mqtt, device: list) -> []: ...
    def build_device_states(self: Blink2Mqtt, states: str, raw_id: str) -> None: ...
    def build_parser() -> argparse.ArgumentParser: ...
    def build_switch(self: Blink2Mqtt, device: list) -> str: ...
    def classify_device(self: Blink2Mqtt, device: list) -> str | None: ...
    def get_api_calls(self: Blink2Mqtt) -> int: ...
    def get_attribute_topic(
        self: "Blink2Mqtt", device_id, category, item, attribute
    ) -> str: ...
    def get_availability_topic(
        self: "Blink2Mqtt", device_id, category="availability", item=None
    ) -> str: ...
    def get_camera_motion(self: Blink2Mqtt, device_id: str) -> Any | None: ...
    def get_command_topic(
        self: "Blink2Mqtt", device_id, category, item=None, command="set"
    ) -> str: ...
    def get_component_type(self: "Blink2Mqtt", device_id): ...
    def get_component(self: "Blink2Mqtt", device_id): ...
    def get_device_availability_topic(self: "Blink2Mqtt", device_id): ...
    def get_device_block(
        self: "Blink2Mqtt", id, name, via=None, sw_version=None, mfr="Amazon"
    ): ...
    def get_device_image_topic(self: "Blink2Mqtt", device_id): ...
    def get_device_name(self: "Blink2Mqtt", device_id): ...
    def get_device_slug(
        self: "Blink2Mqtt", device_id: str, type: Optional[str] = None
    ) -> str: ...
    def get_device_state_topic(self: "Blink2Mqtt", device_id, mode_name=None): ...
    def get_device_topic(
        self: "Blink2Mqtt", component_type, device_id, *parts
    ) -> str: ...
    def get_discovery_topic(self: "Blink2Mqtt", component, item) -> str: ...
    def get_last_call_date(self: Blink2Mqtt) -> datetime: ...
    def get_mode(self: "Blink2Mqtt", device_id, mode_name): ...
    def get_modes(self: "Blink2Mqtt", device_id): ...
    def get_new_client_id(self: Blink2Mqtt): ...
    def get_raw_id(self: "Blink2Mqtt", device_id): ...
    def get_recorded_file(
        self: Blink2Mqtt, device_id: str, file: str
    ) -> str | None: ...
    def get_service_device(self): ...
    def get_service_topic(self: "Blink2Mqtt", topic): ...
    def get_state_topic(self: "Blink2Mqtt", device_id, category, item=None) -> str: ...
    def get_vendor_device_slug(self: "Blink2Mqtt", device_id): ...
    def handle_service_message(
        self: Blink2Mqtt, handler: str, message: str
    ) -> None: ...
    def heartbeat_ready(self: Blink2Mqtt): ...
    def increase_api_calls(self: Blink2Mqtt) -> None: ...
    def is_discovered(self: "Blink2Mqtt", device_id: str) -> bool: ...
    def is_rate_limited(self: Blink2Mqtt) -> bool: ...
    def load_config(self: Blink2Mqtt, config_arg=None): ...
    def main(argv=None): ...
    def mark_ready(self: Blink2Mqtt): ...
    def mqtt_on_connect(
        self: "Blink2Mqtt",
        client: Client,
        userdata: Any,
        flags: dict,
        reason_code: int,
        properties: MQTTMessageInfo = None,
    ) -> None: ...
    def mqtt_on_disconnect(
        self: "Blink2Mqtt",
        client: Client,
        userdata: Any,
        flags: dict,
        reason_code: int,
        properties: MQTTMessageInfo = None,
    ) -> None: ...
    def mqtt_on_log(
        self: "Blink2Mqtt",
        client: Client,
        userdata: Any,
        paho_log_level: LogLevel,
        msg: str,
    ) -> None: ...
    def mqtt_on_message(
        self: "Blink2Mqtt", client: Client, userdata: Any, msg: str
    ) -> None: ...
    def mqtt_on_subscribe(
        self: "Blink2Mqtt",
        client: Client,
        userdata: any,
        mid: int,
        reason_code_list: list[mqtt.ReasonCode],
        properties: mqtt.Properties,
    ) -> None: ...
    def mqtt_safe_publish(
        self: "Blink2Mqtt", topic: str, payload: dict | str | bool | int, **kwargs: Any
    ) -> None: ...
    def mqttc_create(self: "Blink2Mqtt") -> None: ...
    def publish_device_availability(
        self: Blink2Mqtt, device_id: str, online: bool = True
    ) -> None: ...
    def publish_device_discovery(self: Blink2Mqtt, device_id: str) -> None: ...
    def publish_device_image(self: Blink2Mqtt, device_id: str, type: str) -> None: ...
    def publish_device_state(self: Blink2Mqtt, device_id: str) -> None: ...
    def publish_service_availability(
        self: Blink2Mqtt, status: str = "online"
    ) -> None: ...
    def publish_service_discovery(self: Blink2Mqtt) -> None: ...
    def publish_service_state(self: Blink2Mqtt) -> None: ...
    def read_file(self: Blink2Mqtt, file_name): ...
    def rediscover_all(self: Blink2Mqtt) -> None: ...
    def reset_api_call_count(self: Blink2Mqtt) -> None: ...
    def safe_split_device(
        self: "Blink2Mqtt", topic: str, segment: str
    ) -> (str, str): ...
    def set_discovered(self: "Blink2Mqtt", device_id: str) -> None: ...
    def upsert_device(
        self: Blink2Mqtt, device_id: str, **kwargs: dict[str, Any] | str | int | bool
    ) -> None: ...
    def upsert_state(
        self: Blink2Mqtt, device_id, **kwargs: dict[str, Any] | str | int | bool
    ) -> None: ...
